# app.py ‚Äì Dashboard Streamlit : Analyse √ânerg√©tique France

import streamlit as st
import pandas as pd
import plotly.express as px
import urllib.request

# Lien direct vers le fichier CSV h√©berg√© sur Google Drive
url = "https://drive.google.com/uc?export=download&id=1CFSC1Xq7MR1EDw1TRhuy4gF0psL5t2-a"
output_file = "eco2mix_clean_final_2.csv"

# T√©l√©charger le fichier
urllib.request.urlretrieve(url, output_file)

# Charger les donn√©es
df = pd.read_csv(output_file, sep=";")

# V√©rification des colonnes pour √©viter les erreurs li√©es √† la colonne de date
st.write("Colonnes disponibles dans le fichier :")
st.write(df.columns)

# V√©rification si la colonne "Date - Heure" existe
if "Date - Heure" not in df.columns:
    st.error("La colonne 'Date - Heure' est introuvable dans le fichier.")
    st.stop()  # Arr√™ter l'ex√©cution si la colonne est absente

# Corriger les espaces ou caract√®res invisibles dans les noms de colonnes
df.columns = df.columns.str.strip()

# Convertir la colonne "Date - Heure" en datetime
df["Date - Heure"] = pd.to_datetime(df["Date - Heure"], errors="coerce")

# Cr√©ation des colonnes Ann√©e et Mois
df["Ann√©e"] = df["Date - Heure"].dt.year
df["Mois"] = df["Date - Heure"].dt.month

# Afficher un aper√ßu des donn√©es pour v√©rifier que tout est bon
st.write(df.head())

# D√©finir la page
st.set_page_config(page_title="√ânergie France ‚Äì Dashboard", layout="wide")

# --- SIDEBAR
st.sidebar.title(" Navigation")
pages = ["Accueil", "Exploration", "Visualisations", "Risque national", "Focus Hiver", "Focus ENR", "Synth√®se", "Conclusion", "Sc√©nario 2030"]
page = st.sidebar.radio("Aller √† :", pages)
regions = sorted(df["R√©gion"].dropna().unique())
region = st.sidebar.selectbox("S√©lectionnez une r√©gion :", regions)
annee = st.sidebar.slider("Filtrer par ann√©e", min_value=int(df["Ann√©e"].min()), max_value=int(df["Ann√©e"].max()), value=(2018, 2023))

df_filtered = df[(df["R√©gion"] == region) & (df["Ann√©e"].between(*annee))]

# --- PAGE : ACCUEIL
if page == "Accueil":
    st.title(" Projet Analyse √ânerg√©tique ‚Äì eco2mix (2013‚Äì2023)")
    st.markdown("""
    Bienvenue sur ce tableau de bord interactif visant √† analyser :
    
    - le **phasage entre la consommation et la production**
    - les **d√©s√©quilibres r√©gionaux** 
    - les **risques de blackout national** 
    - le r√¥le des **√©nergies renouvelables** 
    
    Donn√©es issues de [RTE eco2mix](https://odre.opendatasoft.com), nettoy√©es et enrichies.
    """)

# --- PAGE : EXPLORATION
elif page == "Exploration":
    st.header(" Exploration des donn√©es")
    st.write(f" R√©gion : {region} |  Ann√©es : {annee[0]} ‚Äì {annee[1]}")
    st.dataframe(df_filtered)
    st.download_button("‚¨á T√©l√©charger les donn√©es filtr√©es", df_filtered.to_csv(index=False).encode(), file_name="donnees_region.csv")

# --- PAGE : VISUALISATIONS
elif page == "Visualisations":
    st.header(" Visualisations interactives")
    
    st.subheader("Consommation vs Production Totale (par mois)")
    df_month = df_filtered.copy()
    df_month["Mois"] = df_month["Date - Heure"].dt.to_period("M").astype(str)
    monthly = df_month.groupby("Mois")[["Consommation (MW)", "Production_totale"]].mean().reset_index()
    st.plotly_chart(px.bar(monthly, x="Mois", y=["Consommation (MW)", "Production_totale"], barmode="group", title="√âvolution mensuelle"))

    st.subheader("√âvolution de la consommation pour pompage (stockage)")
    df_pompage = df_filtered.groupby("Ann√©e")["Pompage (MW)"].mean().reset_index()
    fig_pompage = px.line(df_pompage, x="Ann√©e", y="Pompage (MW)", title="Utilisation annuelle du pompage")
    st.plotly_chart(fig_pompage)

    st.subheader("D√©s√©quilibre Production - Consommation (Boxplot)")
    df_filtered["delta"] = df_filtered["Production_totale"] - df_filtered["Consommation (MW)"]
    st.plotly_chart(px.box(df_filtered, x="Mois", y="delta", points="all", title="Distribution mensuelle du d√©s√©quilibre"))

    st.subheader("Structure de la production par fili√®re (stacked bar)")
    prod_filtres = df_filtered.groupby("Ann√©e")[["Nucl√©aire (MW)", "Thermique (MW)", "Hydraulique (MW)",
                                                  "Solaire (MW)", "Eolien (MW)", "Bio√©nergies (MW)"]].mean().reset_index()
    fig_stack = px.bar(prod_filtres, x="Ann√©e",
                       y=["Nucl√©aire (MW)", "Thermique (MW)", "Hydraulique (MW)", "Solaire (MW)", "Eolien (MW)", "Bio√©nergies (MW)"],
                       title="Structure moyenne de la production par fili√®re",
                       labels={"value": "MW"}, barmode="stack")
    st.plotly_chart(fig_stack)

# --- PAGE : RISQUE NATIONAL
elif page == "Risque national":
    st.header(" Analyse des risques de blackout (niveau national)")

    st.markdown("""
    ###  Risque de Blackout : qu'est-ce que c'est ?
    Un blackout survient lorsqu‚Äôil y a un **d√©s√©quilibre national brutal** entre l‚Äôoffre et la demande d‚Äô√©lectricit√©.
    Cela peut √™tre caus√© par :
    - une **sous-production** (p√©nurie d‚Äô√©lectricit√©),
    - une **surconsommation** (notamment en hiver),
    - une **incapacit√© du r√©seau √† compenser r√©gionalement**.

    > Nous analysons ici l‚Äô√©volution du **d√©s√©quilibre global (production ‚Äì consommation)** sur 10 ans pour d√©tecter les p√©riodes critiques.
    """)

    # Agr√©gation nationale
    df_nat = df.groupby("Date - Heure")[["Consommation (MW)", "Production_totale"]].sum().reset_index()
    df_nat["delta"] = df_nat["Production_totale"] - df_nat["Consommation (MW)"]

    # Graphique principal : d√©s√©quilibre au fil du temps
    import plotly.graph_objects as go
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=df_nat["Date - Heure"], y=df_nat["delta"],
                             mode="lines", name="Delta (Prod - Conso)", line=dict(color="firebrick")))
    fig.update_layout(title="D√©s√©quilibre national au fil du temps",
                      xaxis_title="Date", yaxis_title="Delta (MW)", height=500)
    st.plotly_chart(fig)

    # Focus sur les mois d'hiver
    st.subheader("‚ùÑÔ∏è Zoom sur les p√©riodes hivernales (D√©c‚ÄìF√©v)")
    df_hiver = df_nat[df_nat["Date - Heure"].dt.month.isin([12, 1, 2])]
    fig_hiver = px.line(df_hiver, x="Date - Heure", y="delta", title="Zoom sur les Hivers (D√©c‚ÄìF√©v)", labels={"delta": "Delta (MW)"})
    st.plotly_chart(fig_hiver)

    # Histogramme des d√©s√©quilibres critiques
    st.subheader(" Distribution des d√©s√©quilibres critiques")
    neg_count = (df_nat["delta"] < 0).sum()
    st.metric(" Nombre de situations critiques", f"{neg_count} cas")
    fig_hist = px.histogram(df_nat[df_nat["delta"] < 0], x="delta", nbins=50, title="Distribution des d√©s√©quilibres n√©gatifs (blackouts potentiels)", labels={"delta": "Delta (MW)"})
    st.plotly_chart(fig_hist)

    # Score de stress √©lectrique
    st.subheader(" Score global de stress √©nerg√©tique")
    score = df_nat["delta"].apply(lambda x: -x if x < 0 else 0).sum()
    st.metric(" MW cumul√©s en d√©s√©quilibre", f"{int(score):,} MW")

    st.info("Ce score totalise tous les MW en d√©ficit sur 10 ans. Plus il est √©lev√©, plus le risque national est important.")

# --- PAGE : FOCUS HIVER
elif page == "Focus Hiver":
    st.header("‚ùÑÔ∏è Analyse critique des hivers √©nerg√©tiques")

    st.markdown("""
    En hiver, la consommation √©lectrique atteint des niveaux records √† cause du chauffage.
    Ce pic saisonnier met en tension le r√©seau, notamment en cas de **production insuffisante** ou de **fort d√©s√©quilibre r√©gional**.
    """)

    # Filtrage hiver (D√©c-Janv-F√©v)
    df_hiver = df[df["Date - Heure"].dt.month.isin([12, 1, 2])]

    st.subheader(" √âvolution nationale de l'√©quilibre en hiver")
    df_hiver_nat = df_hiver.groupby("Date - Heure")[["Consommation (MW)", "Production_totale"]].sum().reset_index()
    df_hiver_nat["delta"] = df_hiver_nat["Production_totale"] - df_hiver_nat["Consommation (MW)"]

    fig = px.line(df_hiver_nat, x="Date - Heure", y="delta", title="D√©s√©quilibre National en Hiver", labels={"delta": "Delta (MW)"})
    st.plotly_chart(fig)

    st.subheader(" R√©gions les plus critiques (hiver uniquement)")
    df_risk = df_hiver.groupby("R√©gion")["delta_prod_cons"].mean().sort_values()
    st.plotly_chart(px.bar(df_risk, title="Delta moyen par r√©gion en hiver", labels={"value": "Delta (MW)"}))


# --- PAGE : ENERGIES RENOUVELABLES
elif page == "Focus ENR":
    st.header(" Focus √ânergies Renouvelables")
    df_enr = df.copy()
    df_enr["Prod_ENR"] = df_enr[["Solaire (MW)", "Eolien (MW)", "Hydraulique (MW)", "Bio√©nergies (MW)"]].sum(axis=1)
    enr_reg = df_enr.groupby("R√©gion")["Prod_ENR"].mean().sort_values()
    st.plotly_chart(px.bar(enr_reg, x=enr_reg.values, y=enr_reg.index, orientation="h", title="Production ENR Moyenne par R√©gion"))

# --- PAGE : SYNTHESE
elif page == "Synth√®se":
    st.header(f"üßæ Synth√®se pour la r√©gion : {region}")
    auto = round(df_filtered["Autonomie"].mean()*100, 1)
    delta = round(df_filtered["delta_prod_cons"].mean(), 0)
    st.metric(" Taux d'autonomie ENR", f"{auto} %")
    st.metric(" Delta moyen Prod - Conso", f"{delta:,} MW")
    dependance = df_filtered["Ech. physiques (MW)"].sum() / df_filtered["Consommation (MW)"].sum()
    st.metric("D√©pendance aux √©changes", f"{round(dependance*100, 1)} %")


    st.markdown("---")
    st.subheader("Interpr√©tation automatique")                                                          
    # Interpr√©tation automatique

    if auto < 30:
        st.error(" Tr√®s faible autonomie : la r√©gion d√©pend fortement des imports.")
    elif auto < 70:
        st.warning(" Autonomie moyenne : attention aux pics de conso.")
    else:
        st.success(" Bonne autonomie √©nerg√©tique.")

    # Bloc carte ‚Äì toujours affich√©
    st.subheader(" Carte des risques r√©gionaux")
    df_carte = df.groupby("R√©gion")["delta_prod_cons"].mean().reset_index()
    df_carte.columns = ["R√©gion", "Delta_Moyen"]

    fig_map = px.choropleth(
        df_carte,
        locations="R√©gion",
        locationmode="geo",
        geojson="https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/regions-version-simplifiee.geojson",
        featureidkey="properties.nom",
        color="Delta_Moyen",
        color_continuous_scale="RdBu_r",
        title="üó∫Ô∏è D√©s√©quilibre moyen par r√©gion (2013‚Äì2023)",
    )

    fig_map.update_geos(fitbounds="locations", visible=False)
    st.plotly_chart(fig_map)

# --- PAGE : CONCLUSION
elif page == "Conclusion":
    st.header(" Conclusion & Recommandations")
    st.markdown("""
    ###  Ce que nous avons observ√© :
    - De fortes variations saisonni√®res dans certaines r√©gions
    - Un risque de d√©s√©quilibre national en hiver (blackout possible)
    - Un d√©s√©quilibre marqu√© dans les r√©gions peu dot√©es en ENR

    ### Recommandations :
    - **Renforcer le stockage** dans les r√©gions √† pic de consommation
    - **R√©√©quilibrer l‚Äôimplantation des ENR**
    - **Simuler des sc√©narios** avec import/export + stockage pour r√©duire les deltas

    Merci pour votre attention 
    """)

# --- PAGE : SC√âNARIO 2030
elif page == "Sc√©nario 2030":
    st.header(" Sc√©nario fictif : Hiver 2030, blackout national ?")

    st.markdown("""
    Ce sc√©nario imagine un hiver tendu en 2030 avec :
    - Fermeture progressive des centrales fossiles 
    - Forte vague de froid 
    - Retard sur l'installation d'ENR 
    
    > Objectif : simuler l'impact de plusieurs **r√©gions d√©ficitaires simultan√©es**.

    **Hypoth√®se** : les 5 r√©gions les plus d√©ficitaires (delta n√©gatif) tombent sous seuil critique pendant 15 jours.
    """)

    # Identifier les 5 r√©gions les plus d√©ficitaires historiquement
    top_risque = df.groupby("R√©gion")["delta_prod_cons"].mean().nsmallest(5).index.tolist()
    st.write(f" R√©gions s√©lectionn√©es : {', '.join(top_risque)}")

    # Filtrer un hiver
    df_2030 = df[df["Date - Heure"].dt.month.isin([1, 2]) & df["R√©gion"].isin(top_risque)].copy()
    df_2030["Simul_delta"] = df_2030["delta_prod_cons"] * 1.2  # on aggrave un peu la situation

    fig = px.line(df_2030, x="Date - Heure", y="Simul_delta", color="R√©gion", title="√âvolution simul√©e du d√©s√©quilibre (hiver tendu)")
    st.plotly_chart(fig)

    total_deficit = df_2030["Simul_delta"].apply(lambda x: -x if x < 0 else 0).sum()
    st.metric(" MW cumul√©s en d√©ficit simul√©", f"{int(total_deficit):,} MW")

    st.warning("""
     R√©sultat : surcharge estim√©e de plusieurs GW.
    Le r√©seau national, sans compensation, entre en **zone rouge**.
    """)

    st.markdown("""
    **Le√ßons du sc√©nario** :
    - Le r√©seau peut absorber un certain nombre de d√©ficits locaux, **mais pas en simultan√©**.
    - La r√©silience √©nerg√©tique d√©pend de **l'interconnexion**, **du stockage**, et de **l'anticipation**.

     Ce sc√©nario montre que sans planification d‚Äôici 2030, un blackout massif est **math√©matiquement plausible**.
    """)

# FIN
